plugins {
    id 'groovy'
    id "ru.vyarus.quality" version "3.4.0"
    id "com.github.ben-manes.versions" version "0.21.0"
}

description = "A library that facilitates translation from one data format to another. Handles batches of messages and fields of objects."
group = "com.hpe.amce"
version = "1.0-SNAPSHOT"

repositories {
    jcenter()
}

dependencies {
    implementation platform('org.apache.logging.log4j:log4j-bom:2.11.2')
    implementation 'org.codehaus.groovy:groovy:2.5.7'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'io.dropwizard.metrics:metrics-core:3.2.6'
    testImplementation 'org.apache.logging.log4j:log4j-core::tests'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.objenesis:objenesis:3.0.1'
    testImplementation 'cglib:cglib-nodep:3.2.12'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

task checkSnapshotDependencies {
    description "Check there are no SNAPSHOT dependencies if we're building non-SNAPSHOT version."
    group "verification"
    onlyIf { !(project.version =~ /SNAPSHOT/) }
    doLast {
        (buildscript.configurations + project.configurations).each { cfg ->
            cfg.dependencies.each { dependency ->
                if (dependency.version =~ /SNAPSHOT/) {
                    throw new GradleException("Build script dependency ${dependency.group}:${dependency.name}" +
                            " has SNAPSHOT version." +
                            " This is forbidden because we're supposed to build release version and" +
                            " there should be no SNAPSHOT dependencies.")
                }
            }
        }
    }
}
check.dependsOn checkSnapshotDependencies

dependencyUpdates {
    // Do not want to duplicate buildscript classpath for FQN to compile
    // com.github.benmanes.gradle.versions.reporter.result.Result
    outputFormatter = { result ->
        // com.github.benmanes.gradle.versions.reporter.result.DependencyOutdated
        result.outdated.dependencies.each { outdated ->
            project.logger.warn(
                    "There is outdated dependency:" +
                            " ${outdated.group}:${outdated.name}:${outdated.version}" +
                            " -> ${outdated.available.release ?: outdated.available.milestone}")
        }
        if (result.gradle.current.isUpdateAvailable && result.gradle.current > result.gradle.running) {
            project.logger.warn(
                    "Gradle is outdated:" +
                            " ${result.gradle.running.version}" +
                            " -> ${result.gradle.current.version}")
        }
        // com.github.benmanes.gradle.versions.reporter.result.DependencyUnresolved
        result.unresolved.dependencies.each { unresolved ->
            project.logger.warn(
                    "Could not determine latest version for" +
                            " ${unresolved.group}:${unresolved.name}:${unresolved.version}" +
                            " because ${unresolved.reason}")
        }
    }
    resolutionStrategy = { ResolutionStrategy strategy ->
        strategy.componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                if (selection.candidate.version =~ /redhat/ || ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].
                        any { qualifier -> selection.candidate.version =~ /(?i)\b${qualifier}\d*\b/ }) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}
check.dependsOn dependencyUpdates
