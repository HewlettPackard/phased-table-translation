package com.hpe.amce.translation.impl

import com.hpe.amce.translation.BatchTranslator
import groovy.transform.CompileStatic

import javax.annotation.Nonnull
import javax.annotation.Nullable

/**
 * Batch translator that can be finely tuned.
 *
 * What will be done around each batch, phase and element can be tuned via
 * {@link DecorableStagedBatchTranslator#aroundBatch},
 * {@link DecorableStagedBatchTranslator#aroundStage} and
 * {@link DecorableStagedBatchTranslator#aroundElement}.
 *
 * With default settings, each stage defined via {@link DecorableStagedBatchTranslator#processingStages}
 * will be applied one-by-one. First stage will receive input batch of elements.
 * Second stage will receive output of first stage. Third stage will receive output of second stage. And so on.
 * Output of the last stage will be returned as final output.
 *
 * By default, errors generated by any stage for any element are ignored and stage output will not contain
 * result of erroneous element processing. This is "best effort" behaviour that can be changed via
 * {@link DecorableStagedBatchTranslator#aroundElement}.
 *
 * O - type of source elements.
 * R - type of result elements.
 * C - type of translation context.
 */
@CompileStatic
class DecorableStagedBatchTranslator<O, R, C> implements BatchTranslator<O, R, C> {

    /**
     * Processing stages through which each element should be processed.
     *
     * @see StagesCaller#processingStages
     */
    @Nonnull
    final Map<String, Closure<List<?>>> processingStages

    /**
     * Translates a batch.
     *
     * By default, this is {@link StagesCaller}.
     * You can decorate default translator to add custom behaviour like per-batch tracing or
     * per-batch metrics reporting.
     */
    @Nonnull
    final BatchTranslator<O, R, C> aroundBatch

    /**
     * Applies translation stage to a batch of elements.
     *
     * By default, this is {@link ActualStageProcessor}.
     * You can decorate default translator to add custom behaviour like per-stage tracing or
     * per-stage metrics reporting.
     */
    @Nonnull
    final AroundStage<C> aroundStage

    /**
     * Applies translation to each element.
     *
     * By default, this is {@link ElementErrorSuppressorDecorator} that delegates to {@link StageCaller}.
     * You can use custom decorators around {@link StageCaller} to add custom behaviour
     * like per-element tracing, per-element metrics reporting or reporting element translation errors
     * to log or metrics.
     */
    @Nonnull
    final AroundElement<C> aroundElement

    /**
     * Creates an instance.
     * @param processingStages Stages that define processing of elements.
     * @see #processingStages
     * @see #aroundBatch
     * @see #aroundStage
     * @see #aroundElement
     */
    DecorableStagedBatchTranslator(@Nonnull Map<String, Closure<List<?>>> processingStages) {
        this.processingStages = processingStages
        aroundElement = new ElementErrorSuppressorDecorator<C>(new StageCaller<C>())
        aroundStage = new ActualStageProcessor<>(aroundElement)
        aroundBatch = new StagesCaller<>(processingStages, aroundStage)
    }

    /**
     * Creates an instance.
     * @param processingStages Stages that define processing of elements.
     * @param aroundBatch Defines how to process a batch of elements.
     * @param aroundStage Defines how to run processing of each stage.
     * @param aroundElement Defines how to run processing of each element of a batch.
     * @see #processingStages
     * @see #aroundBatch
     * @see #aroundStage
     * @see #aroundElement
     */
    DecorableStagedBatchTranslator(@Nonnull Map<String, Closure<List<?>>> processingStages,
                                   @Nonnull BatchTranslator<O, R, C> aroundBatch,
                                   @Nonnull AroundStage<C> aroundStage,
                                   @Nonnull AroundElement<C> aroundElement) {
        this.processingStages = processingStages
        this.aroundBatch = aroundBatch
        this.aroundStage = aroundStage
        this.aroundElement = aroundElement
    }

    @Override
    List<R> translateBatch(@Nullable List<O> elements, @Nullable C context) {
        aroundBatch.translateBatch(elements, context)
    }
}
